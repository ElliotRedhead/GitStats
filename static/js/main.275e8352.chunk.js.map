{"version":3,"sources":["components/fetch.js","App.js","index.js"],"names":["GitCommits","useState","githubUserInput","setGithubUserInput","repoOptions","setRepoOptions","selectedRepo","setSelectedRepo","branchOptions","setBranchOptions","selectedBranch","setSelectedBranch","Grid","container","justify","alignItems","style","minHeight","display","item","direction","Paper","elevation","paddingTop","paddingBottom","minWidth","spacing","xs","sm","lg","md","FilledInput","type","label","variant","value","onChange","event","target","Button","color","onClick","fetch","then","response","json","results","Select","MenuItem","disabled","map","data","index","key","name","forEach","latestCommitSha","commit","sha","commitsList","oldestCommitShas","commitObjects","push","oldestCommitIndex","length","oldestCommitSha","nextPageCommitFetch","shift","console","log","App","path","render","document","getElementById"],"mappings":"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","file":"static/js/main.275e8352.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport { FilledInput, Button, Select, MenuItem, Grid, Paper } from \"@material-ui/core\";\nimport \"../styles/main.scss\";\n\nconst GitCommits = () => {\n\n  const [githubUserInput, setGithubUserInput] = useState(\"ElliotRedhead\");\n\n  const [repoOptions, setRepoOptions] = useState();\n  const [selectedRepo, setSelectedRepo] = useState(\"\");\n\n  const [branchOptions, setBranchOptions] = useState();\n  const [selectedBranch, setSelectedBranch] = useState();\n\n  const githubUserFetch = () => {\n    fetch(`https://api.github.com/users/${githubUserInput}/repos`)\n      .then(response => response.json())\n      .then(\n        (results) => {\n          // console.log(results);\n          setRepoOptions(results);\n        }\n      );\n  };\n\n  const repoBranchFetch = () => {\n    fetch(`https://api.github.com/repos/${githubUserInput}/${selectedRepo}/branches?per_page=100`)\n      .then(response => response.json())\n      .then(\n        (results) => {\n          // console.log(results);\n          setBranchOptions(results);\n        }\n      );\n  };\n\n  const branchCommitFetch = () => {\n    branchOptions.forEach((data) => {\n      const latestCommitSha = data.name === selectedBranch && data.commit.sha;\n      if (latestCommitSha) {\n        fetch(`https://api.github.com/repos/${githubUserInput}/${selectedRepo}/commits?per_page=100&sha=${latestCommitSha}`)\n          .then(response => response.json())\n          .then(\n            (results) => {\n              // console.log(results);\n\n\n              const commitsList = [];\n              const oldestCommitShas = [];\n              \n              let commitObjects = results;\n              commitsList.push(...commitObjects);\n              let oldestCommitIndex = commitObjects.length - 1;\n              let oldestCommitSha = (commitObjects[oldestCommitIndex]).sha;\n              oldestCommitShas.push(oldestCommitSha);\n              \n\n              const nextPageCommitFetch = () => {\n                oldestCommitSha = oldestCommitShas[oldestCommitShas.length-1];\n                \n                fetch(`https://api.github.com/repos/${githubUserInput}/${selectedRepo}/commits?per_page=100&sha=${oldestCommitSha}`)\n                  .then(response => response.json())\n                  .then(\n                    (results) => {\n                      commitObjects = results;\n                      oldestCommitIndex = commitObjects.length - 1;\n                      oldestCommitSha = (commitObjects[oldestCommitIndex]).sha;\n                      oldestCommitShas.push(oldestCommitSha);\n                      // console.log(results);\n                      if (oldestCommitShas[oldestCommitShas.length-1] !== oldestCommitShas[oldestCommitShas.length-2] || oldestCommitShas.length < 2) {\n                        // What would happen if repo has one page of commits equal to exactly 100?\n                        commitObjects.shift();\n                        commitsList.push(...commitObjects);\n                        nextPageCommitFetch();\n                      }\n                    }\n                  );\n              };\n\n              nextPageCommitFetch();\n              console.log(commitsList);\n\n\n            });\n      }\n    });};\n\n  return (\n    <>\n      <Grid container\n        justify=\"center\"\n        alignItems=\"center\"\n        style={{minHeight:\"90vh\",\n          display:\"flex\"}}>\n        <Grid item\n          direction=\"column\"\n          alignItems=\"center\"\n          justify=\"center\"\n          style={{minHeight:\"90vh\",\n            display:\"flex\"}}>\n          <Paper\n            elevation={10}\n            style={{\n              paddingTop: \"6rem\",\n              paddingBottom: \"6rem\",\n              minWidth:\"60vw\"}}\n          >\n            <Grid container\n              direction=\"column\"\n              spacing={8}\n              alignItems=\"center\"\n              justify=\"center\"\n\n            >\n              <Grid item xs={12} sm={10} lg={8} container\n                alignItems=\"center\"\n                spacing={2}>\n                <Grid item xs={12} md={8}>\n                  <FilledInput\n                    type=\"text\"\n                    label=\"Username\"\n                    variant=\"filled\"\n                    value={githubUserInput}\n                    onChange={event => setGithubUserInput(event.target.value)}\n                  />\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Button variant=\"contained\"\n                    color=\"primary\"\n                    onClick={githubUserFetch}>\n        Fetch Repos for User\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {repoOptions ?\n                <>\n                  <Grid item xs={12} sm={10} lg={8} container\n                    alignItems=\"center\"\n                    spacing={2}>\n                    <Grid item xs={12} md={8}>\n                      <Select\n                        onChange={event => setSelectedRepo(event.target.value)}\n                        value={selectedRepo ? selectedRepo : \"None\"}>\n                        <MenuItem value=\"None\" disabled>None</MenuItem>\n                        {repoOptions.map((data,index) => (\n                          <MenuItem key={index} value={data.name}>{data.name}</MenuItem>\n                        ))\n                        }\n                      </Select>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Button variant=\"contained\"\n                        color=\"primary\"\n                        onClick={repoBranchFetch}>\n              Fetch Branches for Selected Repo\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </>\n                : null\n              }\n\n              {branchOptions ?\n                <>\n                  <Grid item xs={12} sm={10} lg={8} container\n                    alignItems=\"center\"\n                    spacing={2}>\n                    <Grid item xs={12} md={8}>\n                      <Select\n                        onChange={event => setSelectedBranch(event.target.value)}\n                        value={selectedBranch ? selectedBranch : \"None\"}>\n                        <MenuItem value=\"None\" disabled>None</MenuItem>\n                        {branchOptions.map((data,index) => (\n                          <MenuItem key={index}>{data.name}</MenuItem>\n                        ))}\n                      </Select>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Button variant=\"contained\"\n                        color=\"primary\"\n                        onClick={branchCommitFetch}>\n              Fetch Commits for Selected Branch\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </>\n                : null\n              }\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n\n};\n\nexport default GitCommits;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport GitCommits from \"./components/fetch\";\n\n\nconst App = () => {\n  \n  return (\n    <>\n      <Switch>\n        <Route path={\"/\"}>\n          <GitCommits />\n        </Route> \n      </Switch>\n    </>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\n\nrender(<Router>\n  <App />\n</Router>,\ndocument.getElementById(\"root\")\n);"],"sourceRoot":""}